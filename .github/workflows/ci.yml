---
name: "CI"
on:
  - "push"
  - "pull_request"

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v1"
      - name: "Linting: black"
        run: "poetry run invoke black"
  bandit:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v1"
      - name: "Linting: bandit"
        run: "poetry run invoke bandit"
    needs:
      - "black"
  pydocstyle:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v1"
      - name: "Linting: pydocstyle"
        run: "poetry run invoke pydocstyle"
    needs:
      - "black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v1"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
    needs:
      - "black"
  yamllint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v1"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
    needs:
      - "black"
  build:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        nautobot-version: ["1.0.3"]
    runs-on: "ubuntu-20.04"
    env:
      PYTHON_VER: "${{ matrix.python-version }}"
      NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: "Build"
        uses: "docker/build-push-action@v2"
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: "./"
          push: false
          tags: "${{ steps.imagetag.outputs.image_tag }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.build-target }}"
          cache-to: "type=gha,scope=${{ matrix.build-target }}"
          build-args: |
            NAUTOBOT_VER=${{ env.NAUTOBOT_VER }}
            PYTHON_VER=${{ env.PYTHON_VER }}
      - name: "Show docker images"
        run: "docker image ls"
    needs:
      - "bandit"
      - "pydocstyle"
      - "flake8"
      - "yamllint"


      # - name: "Create tmp docker dir"
      #   run: "mkdir /tmp/docker"
      # - name: "Cache Docker images"
      #   uses: "actions/cache@v2"
      #   id: "cached-docker-images"
      #   with:
      #     path: "/tmp/docker"
      #     key: "${{ runner.os }}-docker-${{ matrix.python-version }}-${{ hashFiles('./Dockerfile') }}"
      # - name: "Build Container"
      #   if: "steps.cached-docker-images.outputs.cache-hit != 'true'"
      #   run: "poetry run invoke build"



  # build:
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "networktocode/gh-action-setup-poetry-environment@v1"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #   needs:
  #     - "bandit"
  #     - "pydocstyle"
  #     - "flake8"
  #     - "yamllint"
  # pylint:
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "networktocode/gh-action-setup-poetry-environment@v1"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #     - name: "Linting: Pylint"
  #       run: "poetry run invoke pylint"
  #   needs:
  #     - "build"
  # unittest:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: ["3.6", "3.7", "3.8", "3.9"]
  #       nautobot-version: ["1.0.1"]
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_PYTHON_VER: "${{ matrix.python-version }}"
  #     INVOKE_NAUTOBOT_PLUGIN_CHATOPS_GRAFANA_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "networktocode/gh-action-setup-poetry-environment@v1"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #     - name: "Run Tests"
  #       run: "poetry run invoke unittest"
  #   needs:
  #     - "pylint"
  # publish_gh:
  #   name: "Publish to GitHub"
  #   runs-on: "ubuntu-20.04"
  #   if: "startsWith(github.ref, 'refs/tags/v')"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Set up Python"
  #       uses: "actions/setup-python@v2"
  #       with:
  #         python-version: "3.9"
  #     - name: "Install Python Packages"
  #       run: "pip install poetry"
  #     - name: "Set env"
  #       run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
  #     - name: "Run Poetry Version"
  #       run: "poetry version $RELEASE_VERSION"
  #     - name: "Run Poetry Build"
  #       run: "poetry build"
  #     - name: "Upload binaries to release"
  #       uses: "svenstaro/upload-release-action@v2"
  #       with:
  #         repo_token: "${{ secrets.NTC_GITHUB_TOKEN }}"
  #         file: "dist/*"
  #         tag: "${{ github.ref }}"
  #         overwrite: true
  #         file_glob: true
  #   needs:
  #     - "unittest"
  # publish_pypi:
  #   name: "Push Package to PyPI"
  #   runs-on: "ubuntu-20.04"
  #   if: "startsWith(github.ref, 'refs/tags/v')"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Set up Python"
  #       uses: "actions/setup-python@v2"
  #       with:
  #         python-version: "3.9"
  #     - name: "Install Python Packages"
  #       run: "pip install poetry"
  #     - name: "Set env"
  #       run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
  #     - name: "Run Poetry Version"
  #       run: "poetry version $RELEASE_VERSION"
  #     - name: "Run Poetry Build"
  #       run: "poetry build"
  #     - name: "Push to PyPI"
  #       uses: "pypa/gh-action-pypi-publish@release/v1"
  #       with:
  #         user: "__token__"
  #         password: "${{ secrets.PYPI_API_TOKEN }}"
  #   needs:
  #     - "unittest"
